const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const schedule = require("node-schedule"); // Импортируем node-schedule
const mongoose = require("mongoose");

// Подключение к MongoDB
mongoose
  .connect(
    "mongodb+srv://Roman:Hozo323@cluster0.fuq2s.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0",
    {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    }
  )
  .then(() => console.log("Connected to MongoDB Atlas"))
  .catch((err) => console.log("Error connecting to MongoDB:", err));

// Схема для пользователей
const userSchema = new mongoose.Schema({
  userId: { type: Number, required: true, unique: true },
  chatId: { type: Number, required: true },
  firstName: { type: String, required: true },
  lastName: { type: String },
  dateFirstLogin: { type: String },
  language: { type: String, default: "ru" },
  trackedPairs: [
    {
      pair: { type: String, required: true },
      abbreviation: { type: String, required: true },
      isTracked: { type: Boolean, default: false },
      price: { type: Number, default: null },
    },
  ],
});

const User = mongoose.model("User", userSchema);

const token = "7470408844:AAEDBELxri3Bq8AF-AHTRmVzqzMVFNrtnow";
const bot = new TelegramBot(token, { polling: true });

let defaultPairs = [
  { id: 1, pair: "bitcoin", abbreviation: "BTC", isTracked: false, price: null },
  { id: 2, pair: "ethereum", abbreviation: "ETH", isTracked: false, price: null },
  { id: 3, pair: "litecoin", abbreviation: "LTC", isTracked: false, price: null },
  { id: 4, pair: "ripple", abbreviation: "XRP", isTracked: false, price: null },
  { id: 5, pair: "cardano", abbreviation: "ADA", isTracked: false, price: null },
  { id: 6, pair: "eos", abbreviation: "EOS", isTracked: false, price: null },
  { id: 7, pair: "cosmos", abbreviation: "ATOM", isTracked: false, price: null },
  { id: 8, pair: "bitcoin-cash", abbreviation: "BCH", isTracked: false, price: null },
  { id: 9, pair: "dogecoin", abbreviation: "DOGE", isTracked: false, price: null },
  { id: 10, pair: "polkadot", abbreviation: "DOT", isTracked: false, price: null },
  { id: 11, pair: "ethereum-classic", abbreviation: "ETC", isTracked: false, price: null },
  { id: 12, pair: "gas", abbreviation: "GAS", isTracked: false, price: null },
  { id: 13, pair: "stellar", abbreviation: "XLM", isTracked: false, price: null },
  { id: 14, pair: "0x", abbreviation: "ZRX", isTracked: false, price: null },
];


bot.setMyCommands([
  { command: '/pairs', description: 'Выбор пар' }
  
]);
// Функция для добавления или обновления пользователя
// async function addOrUpdateUser(
//   userId,
//   chatId,
//   firstName,
//   lastName,
//   dateFirstLogin,
//   language,
//   trackedPairs
// ) {
//   try {
//     let user = await User.findOne({ userId });

//     if (user) {
//       // Если пользователь найден, обновляем его данные
//       user.chatId = chatId;
//       user.trackedPairs = trackedPairs;
//     } else {
//       // Если пользователь не найден, создаем нового
//       user = new User({
//         userId,
//         chatId,
//         firstName,
//         lastName,
//         dateFirstLogin,
//         language,
//         trackedPairs,
//       });
//       await user.save();
//     }

//     console.log(`User ${userId} saved or updated successfully.`);
//   } catch (error) {
//     console.error("Error saving/updating user:", error);
//   }
// }




// Функция для получения всех пользователей и их данных
async function getAllUsers() {
  try {
    const users = await User.find();
    return users;
  } catch (error) {
    console.error("Error fetching users:", error);
    return [];
  }
}

// Функция для получения актуальных цен
async function getPrices(trackingPairs, userId) {
  try {
    const response = await axios.get(
      "https://api.coingecko.com/api/v3/simple/price",
      {
        params: {
          ids: trackingPairs.map((pair) => pair.pair).join(","),
          vs_currencies: "usd",
        },
      }
    );

    let pricesChanged = false;

    trackingPairs.forEach((pair) => {
      const newPrice = response.data[pair.pair]
        ? response.data[pair.pair].usd
        : null;
      if (pair.price !== newPrice) {
        pair.price = newPrice;
        pricesChanged = true;
      }
    });

    // Сохраняем обновленные цены в базе
    if (pricesChanged) {
      const user = await User.findOne({ userId });
      if (user) {
        user.trackedPairs = trackingPairs;
        await user.save();
      }
    }

    return pricesChanged;
  } catch (error) {
    console.error("Ошибка при получении цен:", error);
    return false;
  }
}

// Генерация кнопок с актуальными ценами
function generateButtons(trackingPairs) {
  return trackingPairs.map((pair) => {
    const symbol = pair.isTracked ? "✅" : "";
    const price = pair.price ? `$ ${pair.price.toFixed(2)}` : "Загрузка...";
    return [
      {
        text: `${symbol} ${pair.abbreviation} - ${price}`,
        callback_data: pair.pair,
      },
    ];
  });
}

const getUsefulData = async () => {
  const now = new Date();
  // Форматируем дату для русской локали
  const formattedDate = now.toLocaleString("ru-RU", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  });
  return formattedDate;
};

// Запрашиваем актуальные цены при старте
bot.onText(/\/start/, async (msg) => {
  const formattedDate = await getUsefulData();
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name || "";
  const language = msg.from.language_code || "ru";
  const dateFirstLogin = formattedDate;

  // Проверяем, есть ли пользователь в базе
  let user = await User.findOne({ userId });

  if (!user) {
    // Если пользователя нет, создаем нового с массивом отслеживаемых пар по умолчанию
    user = new User({
      userId,
      chatId,
      firstName,
      lastName,
      dateFirstLogin,
      language,
      trackedPairs: defaultPairs, // Массив отслеживаемых пар по умолчанию
    });
    await user.save();
    console.log(`User ${userId} created with default tracking pairs.`);
  } else {
    // Если пользователь найден, просто обновляем его chatId (если это нужно)
    console.log(`User ${userId} found and updated.`);
  }

  // Используем массив отслеживаемых пар из базы данных
  const trackedPairs = user.trackedPairs;

  // Приветственное сообщение
  const fName = msg.chat.first_name || "Пользователь";
  const lName = msg.chat.last_name || "";
  bot.sendMessage(chatId, "Привет, " + fName + " " + (lName ? lName : ""));

  // Получаем актуальные цены для отслеживаемых пар
  await getPrices(trackedPairs);

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "Выбрать пары", callback_data: "select_pair" }],
      ],
    },
  };

  bot.sendMessage(
    chatId,
    "Привет! Нажми на кнопку ниже для выбора пар:",
    options
  ); 

});

// Обработка кнопки "Выбрать пары"
bot.on("callback_query", async (query) => {
  const { data, message, from } = query;
  const userId = from.id;

  // Находим пользователя в базе
  const user = await User.findOne({ userId });

  if (!user) {
    bot.answerCallbackQuery(query.id, { text: "Пользователь не найден!" });
    return;
  }

  const trackedPairs = user.trackedPairs;

  if (data === "select_pair") {
    // Получаем цены и только потом обновляем клавиатуру
    const pricesUpdated = await getPrices(trackedPairs, userId);

    if (pricesUpdated) {
      const options = {
        reply_markup: {
          inline_keyboard: generateButtons(trackedPairs),
        },
      };

      bot.editMessageText("Выберите пару для отслеживания:", {
        chat_id: message.chat.id,
        message_id: message.message_id,
        reply_markup: options.reply_markup,
      });

      
    } else {
      bot.answerCallbackQuery(query.id, { text: "Не удалось обновить цены!" });
    }
  } else {
    // Логика переключения состояния отслеживания
    const pairIndex = trackedPairs.findIndex((pair) => pair.pair === data);
    if (pairIndex !== -1) {
      trackedPairs[pairIndex].isTracked = !trackedPairs[pairIndex].isTracked;

      // Сохраняем обновленные данные в базе
      user.trackedPairs = trackedPairs;
      await user.save();

      const updatedKeyboard = generateButtons(trackedPairs);

      await bot.editMessageReplyMarkup(
        { inline_keyboard: updatedKeyboard },
        { chat_id: message.chat.id, message_id: message.message_id }
      );
    }
  }

  bot.answerCallbackQuery(query.id); // Убираем "часики" на кнопке
});

// Функция для проверки изменений цен
async function checkPriceChanges() {
  console.log("Проверяем изменения цен...");

  try {
    // Получаем всех пользователей из базы
    const users = await getAllUsers();

    if (users.length === 0) {
      console.log("Нет пользователей для проверки.");
      return;
    }

    // Собираем уникальные пары для запросов
    const pairsToTrack = [
      ...new Set(
        users.flatMap((user) =>
          user.trackedPairs
            .filter((pair) => pair.isTracked)
            .map((pair) => pair.pair)
        )
      ),
    ];

    if (pairsToTrack.length === 0) {
      console.log("Нет отслеживаемых пар.");
      return;
    }

    // Запрашиваем актуальные цены
    const response = await axios.get(
      "https://api.coingecko.com/api/v3/simple/price",
      {
        params: {
          ids: pairsToTrack.join(","),
          vs_currencies: "usd",
        },
      }
    );

    const currentPrices = response.data;
    console.log(currentPrices);

    // Массив для хранения обновленных пользователей
    const updatedUsers = [];

    // Проверяем изменения для каждой пары каждого пользователя
    for (const user of users) {
      let updated = false; // Флаг для отслеживания изменений

      for (const pair of user.trackedPairs.filter((p) => p.isTracked)) {
        const currentPrice = currentPrices[pair.pair]?.usd;

        if (currentPrice) {
          const priceChange =
            Math.round(((currentPrice - pair.price) / pair.price) * 100 * 100) /
            100;

          // Устанавливаем порог в 0.5%
          if (Math.abs(priceChange) >= 0.1) {
            // const formattedPair = pair.pair.charAt(0).toUpperCase() + pair.pair.slice(1);
            const formattedAbbreviation = pair.abbreviation.toUpperCase();
            console.log(
              `⚠️ Пользователь ${user.firstName}: цена пары ${formattedAbbreviation} изменилась на ${priceChange}%`
            );

            // Отправка сообщения пользователю
            bot.sendMessage(
              user.chatId,
              `🔔 Цена пары ${formattedAbbreviation}/USD изменилась более чем на ${priceChange}%!\nСтарая цена: ${pair.price}\nНовая цена: ${currentPrice}`
            );

            pair.price = currentPrice; // Обновляем цену в базе данных
            updated = true; // Отмечаем, что пользователь был обновлен
          }
        }
      }

      // Если были изменения, добавляем пользователя в список обновленных
      if (updated) {
        updatedUsers.push(user);
      }
    }

    // Обновляем все измененные пользователей в базе
    await Promise.all(
      updatedUsers.map((user) =>
        User.updateOne(
          { userId: user.userId },
          { trackedPairs: user.trackedPairs }
        )
      )
    );
  } catch (error) {
    console.error("Ошибка при проверке изменений цен:", error.message);
  }
};

// Выбор пар, что бы вернуть сообщение в низ диалога
bot.onText(/\/pairs/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // Находим пользователя в базе данных
  const user = await User.findOne({ userId });

  if (!user) {
    bot.sendMessage(chatId, "Пользователь не найден.");
    return;
  }

  const trackedPairs = user.trackedPairs;

  // Получаем актуальные цены
  const pricesUpdated = await getPrices(trackedPairs, userId);

  if (pricesUpdated) {
    // Генерируем кнопки для отображения пар
    const options = {
      reply_markup: {
        inline_keyboard: generateButtons(trackedPairs),
      },
    };

    bot.sendMessage(chatId, "Выберите пару для отслеживания:", options);
  } else {
    bot.sendMessage(chatId, "Не удалось обновить цены.");
  }
});



// Запускаем задачу раз в 20 секунд
schedule.scheduleJob("*/20 * * * * *", checkPriceChanges);

