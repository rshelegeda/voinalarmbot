const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
// require("dotenv").config();
const schedule = require("node-schedule"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-schedule
const mongoose = require("mongoose");
const User = require("./models/User");



console.log(process.env.BOT_TOKEN, process.env.COINGECKO_API_URL, process.env.BOT_LOGO, process.env.PORT);
  



const express = require("express");
const app = express();

app.get("/", (req, res) => res.send("Bot is running"));

const defaultPairs = require("./defaultPairs"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ —Ñ–∞–π–ª–∞
const {
  generateButtons,
  getUsefulData,
  getPrices,
  updateDefaultPairsPrices,
  getAllUsers,
} = require("./utils");

const userRequestTimestamps = {};
const REQUEST_LIMIT_TIME = 120000; // 120 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
function isRequestAllowed(userId) {
  const now = Date.now();
  const lastRequestTime = userRequestTimestamps[userId];

  if (lastRequestTime && now - lastRequestTime < REQUEST_LIMIT_TIME) {
    return false; // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–¥–µ–ª–∞–Ω —Å–ª–∏—à–∫–æ–º –Ω–µ–¥–∞–≤–Ω–æ
  }

  userRequestTimestamps[userId] = now; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  return true;
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
  .connect(process.env.MONGO_URL)
  .then(() => console.log("Connected to MongoDB Atlas"))
  .catch((err) => console.log("Error connecting to MongoDB:", err));

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
updateDefaultPairsPrices(defaultPairs);

bot.setMyCommands([
  { command: "/pairs", description: "–í—ã–±–æ—Ä –ø–∞—Ä" },
  { command: "/start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫" },
]);

bot.onText(/\/start/, async (msg) => {
  const formattedDate = await getUsefulData();
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name;
  const lastName = msg.from.last_name || "";
  const language = msg.from.language_code || "ru";
  const dateFirstLogin = formattedDate;

  const allowed = isRequestAllowed(userId);
  if (!allowed) {
    bot.sendMessage(
      msg.chat.id,
      "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ /start –∏ /pairs —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ."
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
  let user = await User.findOne({ userId });

  if (!user) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –º–∞—Å—Å–∏–≤–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user = new User({
      userId,
      chatId,
      firstName,
      lastName,
      dateFirstLogin,
      language,
      trackedPairs: defaultPairs, // –ú–∞—Å—Å–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    });
    await user.save();
    console.log(`User ${userId} created with default tracking pairs.`);
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ chatId (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ)
    console.log(`User ${userId} found and updated.`);
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const trackedPairs = user.trackedPairs;

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const fName = msg.chat.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const lName = msg.chat.last_name || "";
  await bot.sendMessage(
    chatId,
    "–ü—Ä–∏–≤–µ—Ç, " + fName + " " + (lName ? lName : "")
  );
  await bot.sendMessage(
    chatId,
    "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫ –¥–æ–ª–ª–∞—Ä—É –°–®–ê –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n" +
      "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É. \n\n" +
      "–î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.coingecko.com/\n\n" +
      "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è. –í —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 1%, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. " +
      "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä—ã.\n\n" +
      "–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∏–∂–µ –≤ –ú–µ–Ω—é.\n\n" +
      "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å."
  );
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ defaultPairs
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
  const options = {
    reply_markup: {
      inline_keyboard: generateButtons(defaultPairs), // –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ defaultPairs
    },
  };

  bot.sendMessage(
    chatId,
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:",
    options
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
async function checkPriceChanges() {
  console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω...");

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    const users = await getAllUsers();

    if (users.length === 0) {
      console.log("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.");
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    const pairsToTrack = [
      ...new Set(
        users.flatMap((user) =>
          user.trackedPairs
            .filter((pair) => pair.isTracked)
            .map((pair) => pair.pair)
        )
      ),
    ];

    if (pairsToTrack.length === 0) {
      console.log("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä.");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ defaultPairs
    await updateDefaultPairsPrices(defaultPairs);

    // –ë–µ—Ä–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ defaultPairs
    const currentPrices = defaultPairs.reduce((acc, pair) => {
      acc[pair.pair] = { usd: pair.price };
      return acc;
    }, {});
    console.log(currentPrices);

    let pricesUpdated = false; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º defaultPairs —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    defaultPairs.forEach((pair) => {
      const newPrice = currentPrices[pair.pair]?.usd || null;
      if (newPrice && pair.price !== newPrice) {
        pair.price = newPrice;
        console.log(
          `–¶–µ–Ω–∞ –ø–∞—Ä—ã ${pair.pair} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ defaultPairs: ${newPrice}`
        );
        pricesUpdated = true; // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã–ª–∏
      }
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUsers = [];
    for (const user of users) {
      let updated = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

      for (const pair of user.trackedPairs.filter((p) => p.isTracked)) {
        const currentPrice = defaultPairs.find(
          (p) => p.pair === pair.pair
        )?.price;

        if (currentPrice) {
          const priceChange =
            Math.round(((currentPrice - pair.price) / pair.price) * 100 * 100) /
            100;

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –≤ 1%
          if (Math.abs(priceChange) >= 1) {
            const formattedAbbreviation = pair.abbreviation.toUpperCase();
            console.log(
              `${priceChange > 0 ? "üü¢" : "üî¥"} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
                user.firstName
              }: –¶–µ–Ω–∞ –ø–∞—Ä—ã ${formattedAbbreviation}/USD –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ${priceChange}%`
            );

            try { // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
              bot.sendMessage(
                user.chatId,
                `${
                  priceChange > 0 ? "üü¢" : "üî¥"
                } –¶–µ–Ω–∞ –ø–∞—Ä—ã ${formattedAbbreviation}/USD ${
                  priceChange > 0 ? "–í—ã—Ä–æ—Å–ª–∞" : "–°–Ω–∏–∑–∏–ª–∞—Å—å"
                } –±–æ–ª–µ–µ —á–µ–º –Ω–∞ ${priceChange}%!\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${
                  pair.price
                }\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${currentPrice}`
              );
            } catch (error) {
              if (error.response && error.response.body.error_code === 403) {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${user.chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
              } else {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
              }
            }

            pair.price = currentPrice; // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            updated = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
          }
        }
      }

      if (updated) {
        updatedUsers.push(user);
      }
    }

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
    await Promise.all(
      updatedUsers.map((user) =>
        User.updateOne(
          { userId: user.userId },
          { trackedPairs: user.trackedPairs }
        )
      )
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω:", error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pairs
bot.onText(/\/pairs/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
  const allowed = isRequestAllowed(userId);
  if (!allowed) {
    bot.sendMessage(
      chatId,
      "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /pairs —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 2 –º–∏–Ω—É—Ç—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ."
    );
    return;
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ userId });

    if (!user) {
      bot.sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º trackedPairs –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
    const trackedPairs = user.trackedPairs;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    const options = {
      reply_markup: {
        inline_keyboard: generateButtons(trackedPairs),
      },
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É / –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
      options
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /pairs:", error);
    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.");
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞–∑ –≤ 20 —Å–µ–∫—É–Ω–¥
schedule.scheduleJob("*/60 * * * * *", checkPriceChanges);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—ã"
bot.on("callback_query", async (query) => {
  const { data, message, from } = query;
  const userId = from.id;

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  const user = await User.findOne({ userId });

  if (!user) {
    bot.answerCallbackQuery(query.id, { text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    return;
  }

  const trackedPairs = user.trackedPairs;

  if (data === "select_pair") {
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const pricesUpdated = await getPrices(trackedPairs, userId);

    if (pricesUpdated) {
      const options = {
        reply_markup: {
          inline_keyboard: generateButtons(trackedPairs),
        },
      };

      bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", {
        chat_id: message.chat.id,
        message_id: message.message_id,
        reply_markup: options.reply_markup,
      });
    } else {
      bot.answerCallbackQuery(query.id, { text: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã!" });
    }
  } else {
    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const pairIndex = trackedPairs.findIndex((pair) => pair.pair === data);
    if (pairIndex !== -1) {
      trackedPairs[pairIndex].isTracked = !trackedPairs[pairIndex].isTracked;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
      user.trackedPairs = trackedPairs;
      await user.save();

      const updatedKeyboard = generateButtons(trackedPairs);

      await bot.editMessageReplyMarkup(
        { inline_keyboard: updatedKeyboard },
        { chat_id: message.chat.id, message_id: message.message_id }
      );
    }
  }

  bot.answerCallbackQuery(query.id); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
});
